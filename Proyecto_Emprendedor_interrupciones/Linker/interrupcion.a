;#include <mega328p.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;#define ADC_VREF_TYPE 0x60
;
;// Read the 8 most significant bits
;// of the AD conversion result
;unsigned char read_adc(unsigned char adc_input)
; 0000 0009 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 000A ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 000B // Delay needed for the stabilization of the ADC input voltage
; 0000 000C delay_us(10);
;PCODE: $00000012 VOL: 0
; 0000 000D // Start the AD conversion
; 0000 000E ADCSRA|=0x40;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 000F // Wait for the AD conversion to complete
; 0000 0010 while ((ADCSRA & 0x10)==0);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0011 ADCSRA|=0x10;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0012 return ADCH;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0013 }
;PCODE: $00000022 VOL: 0
;
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0018 {
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0019 // Place your code here
; 0000 001A   PORTB.0=1;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 001B   delay_ms(3000);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 001C   PORTB.0=0;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 001D 
; 0000 001E }
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;
;unsigned int valorpot=0;
;void main(){
; 0000 0021 void main(){
;PCODE: $0000002F VOL: 0
; 0000 0022 
; 0000 0023 DDRB.0=1; //LED Y MOTOR
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0024 PORTD.2=1; //PULL-UP PB
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0025 
; 0000 0026 
; 0000 0027 // External Interrupt(s) initialization
; 0000 0028 // INT0: On
; 0000 0029 // INT0 Mode: Falling Edge
; 0000 002A // INT1: Off
; 0000 002B // Interrupt on any change on pins PCINT0-7: Off
; 0000 002C // Interrupt on any change on pins PCINT8-14: Off
; 0000 002D // Interrupt on any change on pins PCINT16-23: Off
; 0000 002E EICRA=0x02;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 002F EIMSK=0x01;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0030 EIFR=0x01;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0031 PCICR=0x00;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0032 
; 0000 0033 DIDR0=0x00;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0034 ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0035 ADCSRA=0x81;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0036 ADCSRB&=0x7F;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0037 ADCSRB|=0x80;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0038 
; 0000 0039 // Global enable interrupts
; 0000 003A #asm("sei")
;PCODE: $00000048 VOL: 0
	sei
;PCODE: $00000049 VOL: 0
; 0000 003B 
; 0000 003C while(1){
;PCODE: $0000004A VOL: 0
; 0000 003D 
; 0000 003E valorpot = read_adc(0);
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 003F 
; 0000 0040 if(valorpot==254){
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0041         PORTB.0=1;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0042 
; 0000 0043 
; 0000 0044 }else{
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0045     PORTB.0=0;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0046 }
;PCODE: $00000059 VOL: 0
; 0000 0047 
; 0000 0048 
; 0000 0049 }
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 004A }
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
