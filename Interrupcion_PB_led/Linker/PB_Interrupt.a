;#include <stdio.h>
;#include <90USB1286.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;int cliflag =0;
;
;//// Timer 0 output compare A interrupt service routine
;//interrupt [TIM0_COMPA] void timer0_compa_isr(void)
;//{
;//
;//    PORTC ^= (1 << PORTC7);
;//
;//}
;
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0010 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0011 // Place your code here
; 0000 0012      PORTC ^= (1 << PORTC7);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0013     cliflag=1;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0014 
; 0000 0015 
; 0000 0016 }
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;
;void main(){
; 0000 0018 void main(){
;PCODE: $00000018 VOL: 0
; 0000 0019     DDRC.7=1;//LED SALIDA
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 001A     PORTD.0=1;//BOTON DE ENTRADA  con pullup
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 001B 
; 0000 001C     EICRA=0x02;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 001D     EIMSK=0x01;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 001E     EIFR=0x01;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 001F     PCICR=0x00;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0020 //
; 0000 0021 //    TCCR0A=0x02;//modo CTC
; 0000 0022 //    TCCR0B=0x05;//1024 preescaling
; 0000 0023 //    OCR0A=195; //Numero e ticks para 0.01segundos
; 0000 0024     // Timer/Counter 0 Interrupt(s) initialization
; 0000 0025     //TIMSK0=0x02;
; 0000 0026 
; 0000 0027 
; 0000 0028 
; 0000 0029 
; 0000 002A 
; 0000 002B while(1){
;PCODE: $00000025 VOL: 0
; 0000 002C 
; 0000 002D //  if(OCR0A==195){
; 0000 002E //    extra++;
; 0000 002F //    PORTC.7=0;
; 0000 0030 //        if(extra>10){
; 0000 0031 //                PORTC.7=1;
; 0000 0032 //                extra=0;
; 0000 0033 //
; 0000 0034 //
; 0000 0035 //        }
; 0000 0036 //  }
; 0000 0037 //}
; 0000 0038         if(cliflag == 0){
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0039                 #asm ("SEI")
;PCODE: $00000029 VOL: 0
	SEI
;PCODE: $0000002A VOL: 0
; 0000 003A         }else{
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 003B              #asm ("CLI")
;PCODE: $0000002D VOL: 0
	CLI
;PCODE: $0000002E VOL: 0
; 0000 003C              delay_ms(750);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 003D              cliflag=0;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 003E         }
;PCODE: $00000034 VOL: 0
; 0000 003F }
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0040 
; 0000 0041 
; 0000 0042 }
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
